boostDM v1.1 Release Notes
--------------------------


There are a number of changes with respect to the previous version. 



Reference genome bug fixed
~~~~~~~~~~~~~~~~~~~~~~~~~~

The most important difference with respect to the previous release version 1.0 is connected with a bug that prevented 
the randomization of passenger mutations as intended, i.e., using the trinucleotide context probabilities derived 
from the observed context frequencies in the cohort mutational data. Instead, for some genes, the pipeline did not match 
correctly positions with reference trinucleotides due to the usage of incompatible genome builds: hg38 and hg19. 

We have conducted a study to assess the impact of this bug at the modeling that we include as an Appendix to this notes. 
While in general the models cast similar predictions with respect to the previous version of the pipeline, for a reduced 
number of cases the differences are significant. 


Variant Effect Predictor version
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The new release uses ENSEMBL VEP v.101 annotations instead of v.92.


Genomic regions comprised in the models
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This release uses a new definition of regions subject to analysis which is used both through training and prediction. 
The regions analyzed include exons and intronic splicing regions in accordance with the canonical transcript definition by ENSEMBL v.101. 
Concretely, we include the exons mapping the canonical transcripts of ENSEMBL v.101 as well as intronic sites within 25 bp distance from 
the pre-mRNA exon-intron junctions.


Cluster features are uniform across cohorts of same tumor type category
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Although cluster features are generated by the methods OncodriveCLUSTL, HotMAPs and smRegions on a cohort-by-cohort basis, the boostDM models are 
specified by tumor-type, meaning that an aggregation or consensus step has to be taken in order to annotate the mutations in the training and test sets.
In the previous version each mutation instance inherited the cluster feature annotations from the cohort where the mutation was originally reported. 
Thus in a training set there could be instances of the same mutation (same genomic coordinates and alternate allele) displaying different cluster
feature values. 

In the current version we have modified this criterion: if a mutation is mapped by a clustering feature in some cohort of a give tumor type, 
all the instances of the mutation will have the same cluster feature value in the training and prediction corresponding to this tumor type.


Consequence type definitions have been updated
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We have extended the set of sequence ontology (SO) terms that map to the consequence classification we employ in the pipeline: 
missense, nonsense, splicing and synonymous. Nonsense mutations now include the SO terms: stop_gained, stop_lost and start_lost variants. 
Splicing mutations now include the SO terms: splice_donor_variant, splice_acceptor_variant, splice_region_variant and intron_variant -- 
in the regions we analyze, intronic mutations can only be found in the intronic splicing regions described in the previous section.


Pan-gene models are discontinued
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We have discontinued the training of meta-gene models based on the dichotomous mode-of-action classification
into oncogenes (Act) and tumor suppressor (LoF) genes. The pipeline now only renders models that are gene-specific.
Consequently the usage of the oncogenic mode-of-action or Role of the gene as a feature has been discontinued, too.


IntOGen integration
-------------------

The output of intogen now generates a unified data environment for the boostDM pipeline to be run from the new
outputs of IntOGen with little preprocessing required.


Model Selection Criteria
------------------------

The model selection strategy is done with two steps:

1) Models are only trained if there are at least 30 mutations on average in the training split
2) We apply a composite rule that requires:
    * mean $F_{50}$-score $\geq$ 0.8
    * and to meet minimum discovery-index threshold (discovery.tsv.gz) for each...
    * ...number of observed mutations tiers (discovery.tsv.gz)
    
```

We have updated step 2) changing the minimum discovery-index thresholds and tiers.
The new step 2) would read in Python pseudo-code as follows:

DISCOVERY_TIERS = (0, 0.5, 0.75)
MUTATION_TIERS = (50, 30, 0)
FSCORE_THRESHOLD = 0.8

def meet_condition(fscore, discovery, n_muts):
    if fscore >= FSCORE_THRESHOLD:
        for discovery_thresh, n_muts_thresh in zip(DISCOVERY_TIERS, MUTATION_TIERS):
            if (discovery >= discovery_thresh) and (n_muts >= n_muts_thresh):
                return True
    return False
```


